# ╔══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
# ║ Single-AMI Inspector Scanner - CloudFormation Template                                                                                                   ║
# ╚══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝

AWSTemplateFormatVersion: "2010-09-09"
Metadata:
    Version: "v.1.0.0"
Description: "CloudFormation template for all required resources to leverage AWS Inspector to scan a multiple AMIs on a schedule basis"

# ╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
# ║ Multi-AMI Scanner - CloudFormation Template Parameters                                                                                             ║
# ╠═══════════════════════════════╤══════════════════╤═════════════════════════════════════════════════════════════════════════════════════════════════╣
# ║ InspectorReportFormat         │ String (list)    │ Valid options are 'CSV' or 'JSON' (case sensitive)                                              ║
# ║ InstanceType                  │ String (list)    │ Used to define which instance type to load the AMI onto temporarily                             ║
# ║ InstanceSubnetID              │ String           │ Used to define the existing subnetID which the temporary instance will launch into              ║
# ║ ScannedAMIID                  │ String           │ Used to define the existing AMI ID which will be launched and scanned by Inspector              ║
# ║ S3ReportBucketName            │ String           │ Used to define the S3 bucket name where the Inspector scanned reports will be exported          ║
# ║ KmsKeyAdministratorRole       │ String           │ Used to define which exiting IAM role needs to have Administrator access to the Kms key created ║
# ║ SnsTopic                      │ String           │ Used to define which SNS topic completion notifications are published to                        ║
# ╚═══════════════════════════════╧══════════════════╧═════════════════════════════════════════════════════════════════════════════════════════════════╝
Parameters:
    InspectorReportFormat:
      Type: String
      Default: CSV
      AllowedValues:
          - CSV
          - JSON
      Description: Select the preferred Inspector report format

    InstanceType:
      Type: String
      Default: t3.medium
      AllowedValues:
          - t3.small
          - t3.medium
          - t3.large
          - t3.xlarge
      Description: Select the preferred instance type for temporary AMI boot

    InstanceSubnetID:
      Type: AWS::EC2::Subnet::Id
      Default: ""
      Description: Subnet ID for temporary EC2 instance to be launched into 
          
    ScannedAMIID:
      Type: String
      Default: "ami-"
      Description: Define the AMI ID which will be scanned by Inspector
    
    S3ReportBucketName:
      Type: String
      Description: S3 bucket name where the Inspector scanned reports will be exported eg. ami-scanner-reports-AccountID
      AllowedPattern: ([a-z0-9]+(-[a-z0-9]+)+)

    KmsKeyAdministratorRole:
      Type: String
      Default: Admin
      Description: Enter the IAM role name for Administrator access to the created KMS key. This should be an existing role.
      
    SnsTopic:
      Type: String
      Default: InspectorScanner
      Description: Enter the SNS topic name for notification publishing
                       
# ╔═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
# ║ Single AMI Scanner - CloudFormation Template Resources                                                                                                              ║
# ╠═══════════════════════════════════════════╤═══════════════════════════════════╤═════════════════════════════════════════════════════════════════════════════════════╣
# ║ TagAMILambdaFunction                      │ AWS::Lambda::Function             │ Function for tagging EC2 images once scanning has completed from the state machine  ║
# ║ CreateEBRuleLambdaFunction                │ AWS::Lambda::Function             │ Function to create a temporary Eventbridge rule to capture instance scanning events ║
# ║ CleanupEBRuleLambdaFunction               │ AWS::Lambda::Function             │ Function for removing the Eventbridge rule created for capturing scanning events    ║
# ║ CreateInspectorReportLambdaFunction       │ AWS::Lambda::Function             │ Function to create an Inspector report and export to an S3 bucket                   ║
# ║ TerminateEC2LambdaFunction                │ AWS::Lambda::Function             │ Function to terminate the temporary EC2 instance                                    ║
# ║ SingleAMILambdaFunction                   │ AWS::Lambda::Function             │ Function to process a single AMI for scanning                                       ║
# ║ Part1StepFunctionsStateMachine            │ AWS::StepFunctions::StateMachine  │ State machine to coordinate Part 1 of the AMI scanning workflow and tasks           ║
# ║ Part2StepFunctionsStateMachine            │ AWS::StepFunctions::StateMachine  │ State machine to coordinate Part 2 of the AMI scanning workflow and tasks           ║
# ║ AMIScannerStateMachinePolicy              │ AWS::IAM::ManagedPolicy           │ Custom policy to provide access to the State Machines to complete tasks             ║
# ║ TagAMILambdaPolicy                        │ AWS::IAM::ManagedPolicy           │ Custom policy for providing permissions for tagging AMI Lambda function             ║
# ║ InvokeStateMachineEventbridgeRole         │ AWS::IAM::Role                    │ Role for invoking the state machine from Eventbridge rule                           ║
# ║ InvokeStateMachineEventbridgePolicy       │ AWS::IAM::ManagedPolicy           │ Custom policy to provide access to the Lambda function                              ║
# ║ CreateEBRuleLambdaFunctionRole            │ AWS::IAM::Role                    │ Role for Lambda function to create temporary EventBridge rule                       ║
# ║ CreateEBRuleLambdaFunctionRolePolicy      │ AWS::IAM::ManagedPolicy           │ Custom policy to provide access to the Lambda function                              ║
# ║ CleanupEBRuleLambdaFunctionRole           │ AWS::IAM::Role                    │ Role for Lambda function to remove temporary EventBridge rule                       ║
# ║ CleanupEBRuleLambdaFunctionRolePolicy     │ AWS::IAM::ManagedPolicy           │ Custom policy to provide access to the Lambda function                              ║
# ║ InspectorFindingsLambdaFunctionRole       │ AWS::IAM::Role                    │ Role for Lambda function to generate inspector findings                             ║
# ║ InspectorFindingsLambdaFunctionRolePolicy │ AWS::IAM::ManagedPolicy           │ Custom policy to provide access to the Lambda function                              ║
# ║ TerminateEC2LambdaFunctionPolicy          │ AWS::IAM::ManagedPolicy           │ Custom policy to provide access to the Lambda function                              ║
# ║ TerminateEC2LambdaFunctionRole            │ AWS::IAM::Role                    │ Role for Lambda function to terminate the temporary EC2 instance                    ║
# ║ StateMachineRole                          │ AWS::IAM::Role                    │ Role for step functions state machine                                               ║
# ║ TagAMILambdaFunctionRole                  │ AWS::IAM::Role                    │ Role for Lambda function to tag an EC2 AMI                                          ║
# ║ ReportsS3Bucket                           │ AWS::S3::Bucket                   │ S3 Bucket to store inspector findings                                               ║
# ║ S3BucketPolicy                            │ AWS::S3::BucketPolicy             │ Policy document providing access to S3 bucket for Inspector                         ║
# ║ EC2InstanceRole                           │ AWS::IAM::Role                    │ Role for EC2 SSM access                                                             ║
# ║ EC2InstanceProfile                        │ AWS::IAM::InstanceProfile         │ Instance profile to attach to EC2 instance                                          ║
# ║ AMIScannerSNSTopic                        │ AWS::SNS::Topic                   │ Topic for sending solution notifications                                            ║
# ║ KMSKey                                    │ AWS::KMS::Key                     │ Key for generation of Inspector finding report                                      ║
# ║ KMSKeyAlias                               │ AWS::KMS::Alias                   │ Alias (name identifier) for KMS key                                                 ║
# ║ SingleAMILambdaPolicy                     │ AWS::IAM::ManagedPolicy           │ Custom policy to provide access to the Lambda function                              ║
# ║ SingleAMILambdaFunctionRole               │ AWS::IAM::Role                    │ Role for Lambda function to process the AMI for scanning                            ║
# ╚═══════════════════════════════════════════╧═══════════════════════════════════╧═════════════════════════════════════════════════════════════════════════════════════╝
Resources:
  TagAMILambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: AMIScanner-TagAMI
      Handler: index.lambda_handler
      Architectures:
        - x86_64
      Code:
        ZipFile: |
          import os
          import boto3
          ec2 = boto3.resource('ec2')

          def lambda_handler(event, context):  
              AMI_ID=event['AMI_ID']
              KEY_NAME=event['KEY_NAME']
              KEY_VALUE=event['KEY_VALUE']
              response = ec2.create_tags(Resources=[AMI_ID],
                  Tags=[{'Key': KEY_NAME,'Value': KEY_VALUE}])
              return "success"

      Role: !GetAtt TagAMILambdaFunctionRole.Arn
      Runtime: python3.9
  
  CreateEBRuleLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: AMIScanner-CreateEBRule
      Handler: index.lambda_handler
      Architectures:
        - x86_64
      Code:
        ZipFile: |
          import boto3
          import json

          eventclient = boto3.client('events')

          def lambda_handler(event, context): 
              INSTANCE_ID=event['INSTANCE_ID']
              STATEMACHINE_ARN=event['STATEMACHINE_ARN']
              STATEMACHINE_ROLEARN=event['STATEMACHINE_ROLEARN']
              REPORT_S3BUCKET=event['REPORT_S3BUCKET']
              KEY_NAME=event['KEY_NAME']
              AMI_ID=event['AMI_ID']
              SNSTOPIC_ARN=event['SNSTOPIC_ARN']
              S3REPORT_FORMAT=event['S3REPORT_FORMAT']
              put_rule_response = eventclient.put_rule(
                  Name=INSTANCE_ID,
                  State='ENABLED',
                  Description='AMI Scanner rule for EC2 instance',
                  EventBusName='default',
                  EventPattern= json.dumps({
                        'source': ['aws.inspector2'],
                        'detail-type': ['Inspector2 Scan'],
                        'resources': [INSTANCE_ID]
                    })
                  )
              put_target_response = eventclient.put_targets(
                  Rule=INSTANCE_ID,
                  Targets=[{
                          'Id': 'AMIScannerStateMachine',
                          'Arn': STATEMACHINE_ARN, 'RoleArn': STATEMACHINE_ROLEARN,
                          'Input': json.dumps({'LaunchedInstanceId': INSTANCE_ID, 
                              'S3Bucket': REPORT_S3BUCKET,
                                'KeyName': KEY_NAME,
                                  'AmiId': AMI_ID,
                                  'SnsTopic': SNSTOPIC_ARN,
                                  'S3ReportFormat': S3REPORT_FORMAT
                          })
                          }]
                  )
              return "success"

      Role: !GetAtt CreateEBRuleLambdaFunctionRole.Arn
      Runtime: python3.9

  CleanupEBRuleLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: AMIScanner-CleanupEBRule
      Handler: index.lambda_handler
      Architectures:
        - x86_64
      Code:
        ZipFile: |
          import boto3
          eventclient = boto3.client('events')

          def lambda_handler(event, context):  
              INSTANCE_ID=event['INSTANCE_ID']
              deletetargets_response = eventclient.remove_targets(
                  Rule=INSTANCE_ID,
                  EventBusName='default',
                  Ids=['AMIScannerStateMachine']
                  )
              deleterule_response = eventclient.delete_rule(
                  Name=INSTANCE_ID,
                  EventBusName='default'
                  )
              return "success"

      Role: !GetAtt CleanupEBRuleLambdaFunctionRole.Arn
      Runtime: python3.9

  CreateInspectorReportLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: AMIScanner-InspectorFindingsReport
      Handler: index.lambda_handler
      Architectures:
        - x86_64
      Code:
        ZipFile: |
          import boto3
          import os
          import json
          client = boto3.client('inspector2')

          def lambda_handler(event, context):  
              KEYNAME=event['KEYNAME']
              INSTANCEID=event['INSTANCEID']
              AMI=event['AMI']
              S3BUCKET=event['S3BUCKET']
              REPORTFORMAT=event['S3REPORTFORMAT']
              response = client.create_findings_report(
                  filterCriteria={
                      'resourceId' : [
                        {
                        'comparison' : 'EQUALS',
                        'value' : INSTANCEID
                        },]
                      },
                  reportFormat=REPORTFORMAT,
                  s3Destination={
                      'bucketName': S3BUCKET,
                      'keyPrefix': AMI,
                      'kmsKeyArn': KEYNAME
                      }
              )
              return "success"

      Role: !GetAtt InspectorFindingsLambdaFunctionRole.Arn
      Runtime: python3.9

  TerminateEC2InstanceLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: AMIScanner-TerminateEC2
      Handler: index.lambda_handler
      Architectures:
        - x86_64
      Code:
        ZipFile: |
          import boto3
          ec2 = boto3.client('ec2')

          def lambda_handler(event, context):  
              INSTANCEID=event['INSTANCEID']
              response = ec2.terminate_instances(InstanceIds=[INSTANCEID,])
              return "success"

      Role: !GetAtt TerminateEC2LambdaFunctionRole.Arn
      Runtime: python3.9

  SingleAMILambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: AMIScanner-SingleAMI
      Handler: index.lambda_handler
      Architectures:
        - x86_64
      Code:
        ZipFile: |
              import boto3
              import os
              import json
              ec2 = boto3.client('ec2')
              sns_client = boto3.client('sns')

              # Declare environment variables 
              CURRENT_REGION=os.environ.get('CURRENT_REGION')

              # Set the region in which the Step Function and Inspector Scanning will run
              stepFunction = boto3.client('stepfunctions', region_name=CURRENT_REGION)

              def lambda_handler(event, context):
                  INSTANCE_TYPE=event['InstanceType']
                  KMSKEY_NAME=event['KmsKeyName']
                  SUBNET_ID=event['SubnetId']
                  INSPECTOR_S3BUCKET=event['S3Bucket']
                  AMI_SCANNED=event['AmiId']
                  INSTANCE_PROFILEARN=event['Ec2InstanceProfile']
                  INSPECTOR_REPORTFORMAT=event['S3ReportFormat']
                  SNS_TOPICNAME=event['SnsTopic']
                  STATE_MACHINE=event['StateMachine']
                                    
                  # If the tagged ami results in no AMIs tagged, we need to make sure we send a notification
                  if len(AMI_SCANNED) !=0 and (AMI_SCANNED) != '':
                      input_dict= {
                            'AmiId': AMI_SCANNED,
                            'InstanceType' : INSTANCE_TYPE,
                            'SubnetId' : SUBNET_ID,
                            'Ec2InstanceProfile' : INSTANCE_PROFILEARN,
                            'S3Bucket' : INSPECTOR_S3BUCKET,
                            'S3ReportFormat' : INSPECTOR_REPORTFORMAT,
                            'KmsKeyName' : KMSKEY_NAME,
                            'SnsTopic' : SNS_TOPICNAME
                            }
                      response = stepFunction.start_execution(stateMachineArn=STATE_MACHINE,input = json.dumps(input_dict))  
                      
                      # Send a message to a SNS topic for monitoring
                      sns_client.publish(TopicArn=SNS_TOPICNAME,Subject='AMI to be Inspector Scanned',Message=str(AMI_SCANNED))
                  else:
                      # Send a message to a SNS topic for monitoring no AMIs were detected for scanning
                      sns_client.publish(TopicArn=SNS_TOPICNAME,Subject='No AMI has been listed for Inspector Scanning',Message='No AMI to be scanned')
                  return "success"

      Role: !GetAtt SingleAMILambdaFunctionRole.Arn
      Runtime: python3.9

  Part1StepFunctionsStateMachine:
      Type: AWS::StepFunctions::StateMachine
      Properties:
        StateMachineName: AMIScanner-Part1-LaunchEC2
        DefinitionString: !Sub |
          {
            "Comment": "Trigger Launch of EC2 instance by Inspector Scanning",
            "StartAt": "Launch Instance",
            "States": {
              "Launch Instance": {
                "Type": "Task",
                "Next": "Wait for Instance Running",
                "Parameters": {
                  "MaxCount": 1,
                  "MinCount": 1,
                  "ImageId.$": "$.AmiId",
                  "InstanceType.$": "$.InstanceType",
                  "SubnetId.$": "$.SubnetId",
                  "IamInstanceProfile": {
                    "Arn.$": "$.Ec2InstanceProfile"
                    }
                },
                "Resource": "arn:${AWS::Partition}:states:::aws-sdk:ec2:runInstances",
                "Retry": [
                  {
                    "ErrorEquals": [
                      "States.ALL"
                    ],
                    "BackoffRate": 1,
                    "IntervalSeconds": 20,
                    "MaxAttempts": 5,
                    "Comment": "EC2 Instance Launch Retry"
                  }
                ],
                "ResultPath": "$.LaunchedInstance",
                "ResultSelector": {
                  "Id.$": "$.Instances[0].InstanceId"
                }
              },
              "Wait for Instance Running": {
                "Type": "Wait",
                "Seconds": 20,
                "Next": "DescribeInstanceState"
              },
              "DescribeInstanceState": {
                "Type": "Task",
                "Next": "Check Instance State",
                "Parameters": {
                  "InstanceIds.$": "States.Array($.LaunchedInstance.Id)"
                },
                "Resource": "arn:${AWS::Partition}:states:::aws-sdk:ec2:describeInstanceStatus",
                "ResultPath": "$.InstanceState",
                "ResultSelector": {
                  "Name.$": "$.InstanceStatuses[0].InstanceState.Name"
                }
              },
              "Check Instance State": {
                "Type": "Choice",
                "Default": "Wait for Instance Running",
                "Choices": [
                  {
                    "Variable": "$.InstanceState.Name",
                    "StringEquals": "running",
                    "Next": "Create Eventbridge Rule"
                  }
                ]
              },
              "Create Eventbridge Rule": {
                "Type": "Task",
                "Resource": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:AMIScanner-CreateEBRule",
                "Parameters": {
                  "INSTANCE_ID.$": "$.LaunchedInstance.Id",
                  "STATEMACHINE_ARN": "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:AMIScanner-Part2-InspectorReport-Cleanup",
                  "STATEMACHINE_ROLEARN": "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/service-role/AMIScanner-InvokeStateMachineEB-role",
                  "REPORT_S3BUCKET.$": "$.S3Bucket",
                  "KEY_NAME.$": "$.KmsKeyName",
                  "AMI_ID.$": "$.AmiId",
                  "SNSTOPIC_ARN.$": "$.SnsTopic",
                  "S3REPORT_FORMAT.$": "$.S3ReportFormat"
                },
                "Next": "Tag Temporary Instance",
                "TimeoutSeconds": 5,
                "ResultPath": null
              },
              "Tag Temporary Instance": {
                "Type": "Task",
                "Resource": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:AMIScanner-TagAMI",
                "Parameters": {
                  "AMI_ID.$": "$.LaunchedInstance.Id",
                  "KEY_NAME": "AMIScannerStatus",
                  "KEY_VALUE": "in progress"
                },
                "Next": "Publish Notification",
                "TimeoutSeconds": 5,
                "ResultPath": null
              },
              "Publish Notification": {
                "Type": "Task",
                "Resource": "arn:${AWS::Partition}:states:::sns:publish",
                "Parameters": {
                  "TopicArn.$": "$.SnsTopic",
                  "Message": {
                    "AWS Inspector AMI Scan status": "EC2 instance",
                    "Temporarily launched AMI using instance.$": "$.LaunchedInstance.Id",
                    "For AMI.$": "$.AmiId"
                  }
                },
                "End": true
              }
            }
          }
        RoleArn: !GetAtt StateMachineRole.Arn
        StateMachineType: STANDARD
  
  Part2StepFunctionsStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: AMIScanner-Part2-InspectorReport-Cleanup
      DefinitionString: !Sub |
        {
          "Comment": "Trigger Launch of EC2 instance by Inspector Scanning",
          "StartAt": "Create Inspector Report",
          "States": {
            "Create Inspector Report": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:AMIScanner-InspectorFindingsReport",
              "Parameters": {
                "INSTANCEID.$": "$.LaunchedInstanceId",
                "AMI.$": "$.AmiId",
                "KEYNAME.$": "$.KeyName",
                "S3REPORTFORMAT.$": "$.S3ReportFormat",
                "S3BUCKET.$": "$.S3Bucket"
              },
              "Next": "Terminate EC2",
              "TimeoutSeconds": 5,
              "ResultPath": null
            },
            "Terminate EC2": {
              "Type": "Task",
              "Parameters": {
                "InstanceIds.$": "States.Array($.LaunchedInstanceId)"
              },
              "Resource": "arn:${AWS::Partition}:states:::aws-sdk:ec2:terminateInstances",
              "Next": "Cleanup EventBridge Rule",
              "ResultPath": null
            },
                "Cleanup EventBridge Rule": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:AMIScanner-CleanupEBRule",
              "Parameters": {
                "INSTANCE_ID.$": "$.LaunchedInstanceId"
              },
              "Next": "Tag Ami",
              "TimeoutSeconds": 5,
              "ResultPath": null
            },
            "Tag Ami": {
                "Type": "Task",
                "Resource": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:AMIScanner-TagAMI",
                "Parameters": {
                  "AMI_ID.$": "$.AmiId",
                  "KEY_NAME": "AMIScannerStatus",
                  "KEY_VALUE.$": "$.S3Bucket"
                },
                "Next": "Publish Notification",
                "TimeoutSeconds": 5,
                "ResultPath": null
              },
            "Publish Notification": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::sns:publish",
              "Parameters": {
                "TopicArn.$": "$.SnsTopic",
                "Message": {
                  "AWS Inspector AMI Scan status": "EC2 instance",
                  "Instance cleanup.$": "$.LaunchedInstanceId",
                  "Inspector report S3 Bucket.$": "$.S3Bucket",
                  "For AMI.$": "$.AmiId"
                }
              },
              "End": true
            }
          }
        }
      RoleArn: !GetAtt StateMachineRole.Arn
      StateMachineType: STANDARD

  AMIScannerStateMachinePolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: Policy for running the step function state machines as part of the Inspector AMI Scannner solution
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
            - Sid: AllowInstanceandInspectorActions
              Effect: Allow
              Action:
                - 'ec2:TerminateInstances'
                - 'ec2:DeleteTags'
                - 'lambda:InvokeFunction'
                - 'ec2:CreateTags'
                - 'ec2:CreateImage'
                - 'ec2:RunInstances'
                - 'inspector2:CreateFindingsReport'
                - 'ec2:CreateVolume'
                - 'ec2:CreateNetworkInterface'
                - 'inspector2:ListFindings'
                - 'ec2:StartInstances'
                - 'ec2:CreateSecurityGroup'
                - 'inspector2:GetFindingsReportStatus'
                - 'ec2:CreateSubnet'
                - 'ec2:DescribeInstanceStatus'
                - 'inspector2:CancelFindingsReport'
              Resource: '*'
            - Sid: AllowS3KMSSNSPermissions
              Effect: Allow
              Action:
                - 's3:PutObject'
                - 'iam:PassRole'
                - 'sns:Publish'
                - 's3:PutBucketPublicAccessBlock'
                - 'kms:PutKeyPolicy'
                - 'kms:GetKeyPolicy'
                - 's3:PutBucketAcl'
                - 's3:PutBucketPolicy'
                - 'states:StartExecution'
                - 's3:CreateBucket'
                - 's3:DeleteObject'
                - 's3:PutObjectAcl'
              Resource: 
                - !Sub 'arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:${SnsTopic}'
                - !Sub 'arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:AMIScanner-Part2-InspectorReport-Cleanup'
                - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${EC2InstanceRole}'
                - !Sub 'arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${KMSKey}'
                - !Sub 'arn:${AWS::Partition}:s3:::${ReportsS3Bucket}'
                - !Sub 'arn:${AWS::Partition}:s3:::${ReportsS3Bucket}/*'
  
  TagAMILambdaPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: Policy for tagging AMIs as part of the Inspector AMI Scannner solution
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
            - Sid: AllowEC2Tagging
              Effect: Allow
              Action:
                - 'ec2:CreateTags'
              Resource: "*"
            - Sid: AllowLogs  
              Effect: Allow
              Action:
                - 'logs:CreateLogGroup'
              Resource: 
                - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*'
            - Sid: AllowLogStreams
              Effect: Allow
              Action:
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: 
                - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Tag-AMI-Scanner:*'

  InvokeStateMachineEventbridgePolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: Policy for invoking the state machine from Eventbridge rule as part of the Inspector AMI Scannner solution
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
            - Sid: AllowStartStateMachine
              Effect: Allow
              Action:
                - 'states:StartExecution'
              Resource: 
              - !Sub 'arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:AMIScanner-Part2-InspectorReport-Cleanup'

  InvokeStateMachineEventbridgeRole:
      Type: AWS::IAM::Role
      Properties:
        Path: "/service-role/"
        RoleName: AMIScanner-InvokeStateMachineEB-role
        AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"states.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"},{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"events.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
        ManagedPolicyArns:
          - !Ref InvokeStateMachineEventbridgePolicy

  CreateEBRuleLambdaFunctionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: "/service-role/"
        RoleName: AMIScanner-CreateEBRule-role
        AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
        ManagedPolicyArns:
          - !Ref CreateEBRuleLambdaFunctionRolePolicy

  CreateEBRuleLambdaFunctionRolePolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: Policy for creating an eventbridge rule as part of the Inspector AMI Scannner solution
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
            - Sid: AllowPutTarget
              Effect: Allow
              Action:
                - 'events:PutTargets'
                - 'events:PutRule'
              Resource: "*"
            - Sid: AllowPassRole
              Effect: Allow
              Action:
                - 'iam:PassRole'
              Resource: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/service-role/AMIScanner-InvokeStateMachineEB-role'

  CleanupEBRuleLambdaFunctionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: "/service-role/"
        RoleName: AMIScanner-CleanupEBRule-role
        AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
        ManagedPolicyArns:
          - !Ref CleanupEBRuleLambdaFunctionRolePolicy

  CleanupEBRuleLambdaFunctionRolePolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: Policy for removing eventbridge rule as part of the Inspector AMI Scannner solution
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
            - Sid: AllowDeleteTarget
              Effect: Allow
              Action:
                - 'events:DeleteRule'
                - 'events:RemoveTargets'
              Resource: "*"

  InspectorFindingsLambdaFunctionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: "/service-role/"
        RoleName: AMIScanner-InspectorFindingsLambda-role
        AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
        ManagedPolicyArns:
          - !Ref InspectorFindingsLambdaFunctionRolePolicy

  InspectorFindingsLambdaFunctionRolePolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: Policy for creating inspector findings via Lambda function as part of the Inspector AMI Scannner solution
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
            - Sid: Allowinvokefunctioncreatefindingsreport
              Effect: Allow
              Action:
                - 'lambda:InvokeFunction'
                - 'inspector2:CreateFindingsReport'
              Resource: "*"
            - Sid: AllowS3access
              Effect: Allow
              Action: 
                - 's3:PutObject'
                - 's3:PutBucketAcl'
                - 's3:PutBucketPolicy'
                - 's3:CreateBucket'
                - 's3:PutObjectAcl'
              Resource: 
                - !Sub 'arn:${AWS::Partition}:s3:::${S3ReportBucketName}/*'
                - !Sub 'arn:${AWS::Partition}:s3:::${S3ReportBucketName}'
            - Sid: AllowKMSGetkey
              Effect: Allow
              Action: 
                - 'kms:GetKeyPolicy'
              Resource: 
                - !Sub 'arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/60e1dcb3-f965-402d-bdad-cb85391c5a07'
  
  TerminateEC2LambdaFunctionPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: Policy for terminating an EC2 instance as part of the Inspector AMI Scannner solution
      PolicyDocument:
        Version: "2012-10-17"
        Statement:  
            Action: ec2:TerminateInstances
            Resource: "*"
            Effect: Allow
            Sid: AllowTerminateEC2
    
  TerminateEC2LambdaFunctionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: "/service-role/"
        RoleName: AMIScanner-TerminateEC2Lambda-role
        AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
        ManagedPolicyArns:
          - !Ref TerminateEC2LambdaFunctionPolicy

  StateMachineRole:
      Type: AWS::IAM::Role
      Properties:
        Path: "/service-role/"
        RoleName: AMIScanner-Statemachine-role
        AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"states.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
        ManagedPolicyArns:
          - !Ref AMIScannerStateMachinePolicy
  
  TagAMILambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/service-role/"
      RoleName: AMIScanner-TagAmi-Lambdafunction-role
      AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
      ManagedPolicyArns:
         - !Ref TagAMILambdaPolicy

  ReportsS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: !Sub "${S3ReportBucketName}"

  S3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref ReportsS3Bucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: Allow Amazon Inspector to add objects to the bucket
            Effect: Allow
            Principal:
              Service: inspector2.amazonaws.com
            Action:
            - s3:PutObject
            - s3:PutObjectAcl
            - s3:AbortMultipartUpload
            Resource: !Sub "arn:${AWS::Partition}:s3:::${ReportsS3Bucket}/*"
            Condition:
              StringEquals:
                aws:SourceAccount: !Sub "${AWS::AccountId}"
              ArnLike:
                aws:SourceArn: !Sub "arn:${AWS::Partition}:inspector2:${AWS::Region}:${AWS::AccountId}:report/*"

  EC2InstanceRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: AMIScanner-ec2instance-role
        AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ec2.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
          - arn:aws:iam::aws:policy/AmazonSSMPatchAssociation

  EC2InstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        Roles:
          -
            !Ref EC2InstanceRole

  AMIScannerSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Ref SnsTopic

  KMSKey:
    Type: AWS::KMS::Key
    Properties:
      Enabled: true
      KeyUsage: ENCRYPT_DECRYPT
      KeyPolicy:
        Version: '2012-10-17'
        Id: kms-key-policy
        Statement:
        - Sid: Allow IAM usage of the KMS key
          Effect: Allow
          Principal:
            AWS: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${KmsKeyAdministratorRole}"
          Action:
          - kms:Encrypt
          - kms:Decrypt
          - kms:ReEncrypt*
          - kms:GenerateDataKey*
          - kms:DescribeKey
          Resource: "*"
        - Sid: Allow Amazon Inspector to use the KMS key
          Effect: Allow
          Principal:
            Service: inspector2.amazonaws.com
          Action:
          - kms:Decrypt
          - kms:GenerateDataKey*
          Resource: "*"
          Condition:
            StringEquals:
              aws:SourceAccount: !Sub "${AWS::AccountId}"
            ArnLike:
              aws:SourceArn: !Sub arn:${AWS::Partition}:inspector2:${AWS::Region}:${AWS::AccountId}:report/*
        - Sid: Allow management access for key administrators
          Effect: Allow
          Principal:
            AWS:
            - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${KmsKeyAdministratorRole}"
          Action:
          - kms:Create*
          - kms:Describe*
          - kms:Enable*
          - kms:List*
          - kms:Put*
          - kms:Update*
          - kms:Revoke*
          - kms:Disable*
          - kms:Get*
          - kms:Delete*
          - kms:TagResource
          - kms:UntagResource
          - kms:ScheduleKeyDeletion
          - kms:CancelKeyDeletion
          Resource: "*"
      KeySpec: SYMMETRIC_DEFAULT
      MultiRegion: false

  KMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/amiscanner-kmskey-alias
      TargetKeyId: !Ref KMSKey
  
  SingleAMILambdaPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: Policy for retrieving the list of AMIs to be scanned
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
            - Sid: StartAMIScannerSF
              Effect: Allow
              Action:
                - 'states:StartExecution'
              Resource: !Sub 'arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:AMIScanner-Part1-LaunchEC2'
            - Sid: AllowSNSPublish
              Effect: Allow
              Action:
                - 'sns:Publish'
              Resource: 
                - !Sub 'arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:${SnsTopic}'

  SingleAMILambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/service-role/"
      RoleName: AMIScanner-Singleami-Lambdafunction-role
      AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
      ManagedPolicyArns:
         - !Ref SingleAMILambdaPolicy

Outputs:
  AmiId:
    Description: The ID of the AMI to scanned 
    Value: !Ref ScannedAMIID
    
  InstanceType: 
    Description: EC2 temporary instance type
    Value: !Ref InstanceType
  
  SubnetId: 
    Description: The subnet ID where the temporary EC2 instance will be launch 
    Value: !Ref InstanceSubnetID
  
  Ec2InstanceProfile:
    Description: The ARN of the EC2 instance profile
    Value: !GetAtt EC2InstanceProfile.Arn
    
  S3Bucket: 
    Description: The bucket name where the Inspector reports will be exported
    Value: !Ref S3ReportBucketName
  
  S3ReportFormat: 
    Description: The report format of the Inspector reports
    Value: !Ref InspectorReportFormat
  
  KmsKeyName: 
    Description: The ARN of the KMS key to be used for encrypting and decrypting the Inspector Report 
    Value: !GetAtt KMSKey.Arn

  SnsTopic: 
    Description: The ARN of the SNS topic which was created for sending notifications 
    Value: !Ref AMIScannerSNSTopic

  StateMachine:
    Description: The ARN of the first Step Function state machine which will be executed first by the Lambda function
    Value: !Ref Part1StepFunctionsStateMachine